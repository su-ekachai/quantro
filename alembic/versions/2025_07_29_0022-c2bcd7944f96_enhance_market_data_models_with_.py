"""enhance_market_data_models_with_timescaledb

Revision ID: c2bcd7944f96
Revises: 13b999375bcc
Create Date: 2025-07-29 00:22:17.176908

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "c2bcd7944f96"
down_revision: str | Sequence[str] | None = "13b999375bcc"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "assets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("asset_class", sa.String(length=20), nullable=False),
        sa.Column("exchange", sa.String(length=50), nullable=False),
        sa.Column("base_currency", sa.String(length=10), nullable=True),
        sa.Column("quote_currency", sa.String(length=10), nullable=True),
        sa.Column("min_order_size", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("max_order_size", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("price_precision", sa.Integer(), nullable=True),
        sa.Column("quantity_precision", sa.Integer(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_assets_id"), "assets", ["id"], unique=False)
    op.create_index(op.f("ix_assets_symbol"), "assets", ["symbol"], unique=True)
    op.create_table(
        "signals",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("strategy_id", sa.Integer(), nullable=False),
        sa.Column("asset_id", sa.Integer(), nullable=False),
        sa.Column("signal_type", sa.String(length=20), nullable=False),
        sa.Column("strength", sa.Numeric(precision=5, scale=4), nullable=False),
        sa.Column("price", sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column(
            "suggested_stop_loss", sa.Numeric(precision=20, scale=8), nullable=True
        ),
        sa.Column(
            "suggested_take_profit", sa.Numeric(precision=20, scale=8), nullable=True
        ),
        sa.Column(
            "suggested_position_size", sa.Numeric(precision=10, scale=4), nullable=True
        ),
        sa.Column("timeframe", sa.String(length=10), nullable=False),
        sa.Column("confidence", sa.Numeric(precision=5, scale=4), nullable=False),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("market_conditions", sa.String(length=100), nullable=True),
        sa.Column("risk_level", sa.String(length=20), nullable=False),
        sa.Column("expected_duration", sa.String(length=20), nullable=True),
        sa.Column("indicators_used", sa.Text(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("generated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("executed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["assets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["strategy_id"],
            ["strategies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_signals_confidence", "signals", ["confidence"], unique=False)
    op.create_index(
        "idx_signals_generated_at", "signals", ["generated_at"], unique=False
    )
    op.create_index("idx_signals_signal_type", "signals", ["signal_type"], unique=False)
    op.create_index("idx_signals_status", "signals", ["status"], unique=False)
    op.create_index(
        "idx_signals_strategy_asset",
        "signals",
        ["strategy_id", "asset_id"],
        unique=False,
    )
    op.create_index("idx_signals_timeframe", "signals", ["timeframe"], unique=False)
    op.create_index(op.f("ix_signals_asset_id"), "signals", ["asset_id"], unique=False)
    op.create_index(op.f("ix_signals_id"), "signals", ["id"], unique=False)
    op.create_index(
        op.f("ix_signals_strategy_id"), "signals", ["strategy_id"], unique=False
    )
    op.drop_index(op.f("ix_symbols_id"), table_name="symbols")
    op.drop_index(op.f("ix_symbols_symbol"), table_name="symbols")
    op.drop_table("symbols")
    op.drop_index(op.f("idx_signals_generated_at"), table_name="trading_signals")
    op.drop_index(op.f("idx_signals_status"), table_name="trading_signals")
    op.drop_index(op.f("idx_signals_strategy_symbol"), table_name="trading_signals")
    op.drop_index(op.f("ix_trading_signals_id"), table_name="trading_signals")
    op.drop_index(op.f("ix_trading_signals_strategy_id"), table_name="trading_signals")
    op.drop_index(op.f("ix_trading_signals_symbol_id"), table_name="trading_signals")
    op.drop_table("trading_signals")
    op.add_column("market_data", sa.Column("asset_id", sa.Integer(), nullable=False))
    op.drop_index(op.f("idx_market_data_symbol_time"), table_name="market_data")
    op.drop_index(op.f("ix_market_data_symbol_id"), table_name="market_data")
    op.drop_constraint(op.f("uq_market_data"), "market_data", type_="unique")
    op.create_unique_constraint(
        "uq_market_data", "market_data", ["asset_id", "timestamp", "timeframe"]
    )
    op.create_index(
        "idx_market_data_asset_time",
        "market_data",
        ["asset_id", "timestamp"],
        unique=False,
    )
    op.create_index(
        "idx_market_data_asset_timeframe",
        "market_data",
        ["asset_id", "timeframe"],
        unique=False,
    )
    op.create_index(
        "idx_market_data_timestamp_desc",
        "market_data",
        ["timestamp"],
        unique=False,
        postgresql_using="btree",
    )
    op.create_index(
        op.f("ix_market_data_asset_id"), "market_data", ["asset_id"], unique=False
    )
    op.drop_constraint(
        op.f("market_data_symbol_id_fkey"), "market_data", type_="foreignkey"
    )
    op.create_foreign_key(None, "market_data", "assets", ["asset_id"], ["id"])
    op.drop_column("market_data", "symbol_id")
    op.add_column("positions", sa.Column("asset_id", sa.Integer(), nullable=False))
    op.drop_index(op.f("idx_positions_portfolio_symbol"), table_name="positions")
    op.drop_index(op.f("ix_positions_symbol_id"), table_name="positions")
    op.create_index("idx_positions_opened_at", "positions", ["opened_at"], unique=False)
    op.create_index(
        "idx_positions_portfolio_asset",
        "positions",
        ["portfolio_id", "asset_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_positions_asset_id"), "positions", ["asset_id"], unique=False
    )
    op.drop_constraint(
        op.f("positions_symbol_id_fkey"), "positions", type_="foreignkey"
    )
    op.create_foreign_key(None, "positions", "assets", ["asset_id"], ["id"])
    op.drop_column("positions", "symbol_id")
    op.add_column("trades", sa.Column("asset_id", sa.Integer(), nullable=False))
    op.drop_index(op.f("idx_trades_portfolio_symbol"), table_name="trades")
    op.drop_index(op.f("ix_trades_symbol_id"), table_name="trades")
    op.create_index(
        "idx_trades_portfolio_asset",
        "trades",
        ["portfolio_id", "asset_id"],
        unique=False,
    )
    op.create_index("idx_trades_side", "trades", ["side"], unique=False)
    op.create_index("idx_trades_trade_type", "trades", ["trade_type"], unique=False)
    op.create_index(op.f("ix_trades_asset_id"), "trades", ["asset_id"], unique=False)
    op.drop_constraint(op.f("trades_symbol_id_fkey"), "trades", type_="foreignkey")
    op.create_foreign_key(None, "trades", "assets", ["asset_id"], ["id"])
    op.drop_column("trades", "symbol_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "trades",
        sa.Column("symbol_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "trades", type_="foreignkey")
    op.create_foreign_key(
        op.f("trades_symbol_id_fkey"), "trades", "symbols", ["symbol_id"], ["id"]
    )
    op.drop_index(op.f("ix_trades_asset_id"), table_name="trades")
    op.drop_index("idx_trades_trade_type", table_name="trades")
    op.drop_index("idx_trades_side", table_name="trades")
    op.drop_index("idx_trades_portfolio_asset", table_name="trades")
    op.create_index(op.f("ix_trades_symbol_id"), "trades", ["symbol_id"], unique=False)
    op.create_index(
        op.f("idx_trades_portfolio_symbol"),
        "trades",
        ["portfolio_id", "symbol_id"],
        unique=False,
    )
    op.drop_column("trades", "asset_id")
    op.add_column(
        "positions",
        sa.Column("symbol_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "positions", type_="foreignkey")
    op.create_foreign_key(
        op.f("positions_symbol_id_fkey"), "positions", "symbols", ["symbol_id"], ["id"]
    )
    op.drop_index(op.f("ix_positions_asset_id"), table_name="positions")
    op.drop_index("idx_positions_portfolio_asset", table_name="positions")
    op.drop_index("idx_positions_opened_at", table_name="positions")
    op.create_index(
        op.f("ix_positions_symbol_id"), "positions", ["symbol_id"], unique=False
    )
    op.create_index(
        op.f("idx_positions_portfolio_symbol"),
        "positions",
        ["portfolio_id", "symbol_id"],
        unique=False,
    )
    op.drop_column("positions", "asset_id")
    op.add_column(
        "market_data",
        sa.Column("symbol_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "market_data", type_="foreignkey")
    op.create_foreign_key(
        op.f("market_data_symbol_id_fkey"),
        "market_data",
        "symbols",
        ["symbol_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_market_data_asset_id"), table_name="market_data")
    op.drop_index(
        "idx_market_data_timestamp_desc",
        table_name="market_data",
        postgresql_using="btree",
    )
    op.drop_index("idx_market_data_asset_timeframe", table_name="market_data")
    op.drop_index("idx_market_data_asset_time", table_name="market_data")
    op.drop_constraint("uq_market_data", "market_data", type_="unique")
    op.create_unique_constraint(
        op.f("uq_market_data"),
        "market_data",
        ["symbol_id", "timestamp", "timeframe"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_index(
        op.f("ix_market_data_symbol_id"), "market_data", ["symbol_id"], unique=False
    )
    op.create_index(
        op.f("idx_market_data_symbol_time"),
        "market_data",
        ["symbol_id", "timestamp"],
        unique=False,
    )
    op.drop_column("market_data", "asset_id")
    op.create_table(
        "trading_signals",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("strategy_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("symbol_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "signal_type", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "strength",
            sa.NUMERIC(precision=5, scale=4),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "price",
            sa.NUMERIC(precision=20, scale=8),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "suggested_stop_loss",
            sa.NUMERIC(precision=20, scale=8),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "suggested_take_profit",
            sa.NUMERIC(precision=20, scale=8),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "suggested_position_size",
            sa.NUMERIC(precision=10, scale=4),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "timeframe", sa.VARCHAR(length=10), autoincrement=False, nullable=False
        ),
        sa.Column(
            "confidence",
            sa.NUMERIC(precision=5, scale=4),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("notes", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column(
            "generated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["strategy_id"],
            ["strategies.id"],
            name=op.f("trading_signals_strategy_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["symbol_id"], ["symbols.id"], name=op.f("trading_signals_symbol_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("trading_signals_pkey")),
    )
    op.create_index(
        op.f("ix_trading_signals_symbol_id"),
        "trading_signals",
        ["symbol_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_trading_signals_strategy_id"),
        "trading_signals",
        ["strategy_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_trading_signals_id"), "trading_signals", ["id"], unique=False
    )
    op.create_index(
        op.f("idx_signals_strategy_symbol"),
        "trading_signals",
        ["strategy_id", "symbol_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_signals_status"), "trading_signals", ["status"], unique=False
    )
    op.create_index(
        op.f("idx_signals_generated_at"),
        "trading_signals",
        ["generated_at"],
        unique=False,
    )
    op.create_table(
        "symbols",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("symbol", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "asset_class", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "exchange", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "base_currency", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
        sa.Column(
            "quote_currency", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
        sa.Column(
            "min_order_size",
            sa.NUMERIC(precision=20, scale=8),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "max_order_size",
            sa.NUMERIC(precision=20, scale=8),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("price_precision", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "quantity_precision", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("symbols_pkey")),
    )
    op.create_index(op.f("ix_symbols_symbol"), "symbols", ["symbol"], unique=True)
    op.create_index(op.f("ix_symbols_id"), "symbols", ["id"], unique=False)
    op.drop_index(op.f("ix_signals_strategy_id"), table_name="signals")
    op.drop_index(op.f("ix_signals_id"), table_name="signals")
    op.drop_index(op.f("ix_signals_asset_id"), table_name="signals")
    op.drop_index("idx_signals_timeframe", table_name="signals")
    op.drop_index("idx_signals_strategy_asset", table_name="signals")
    op.drop_index("idx_signals_status", table_name="signals")
    op.drop_index("idx_signals_signal_type", table_name="signals")
    op.drop_index("idx_signals_generated_at", table_name="signals")
    op.drop_index("idx_signals_confidence", table_name="signals")
    op.drop_table("signals")
    op.drop_index(op.f("ix_assets_symbol"), table_name="assets")
    op.drop_index(op.f("ix_assets_id"), table_name="assets")
    op.drop_table("assets")
    # ### end Alembic commands ###
